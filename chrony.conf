# /etc/chrony.conf 
#
# FYI, USEFUL DIAGNOSTICS COMMANDS
# 
# sudo chronyc makestep
#   skips slewing (small clock changes)  and makes a single step (big change). 
#   This is useful as a troubleshooting tool if DC/OS will not start, however 
#   this chrony.conf file should avoid the need for this.
#
# chronyc activity
#   show recent activity, similar to logs
# 
# chronyc tracking 
#   shows if chrony is synchronized to an NTP server
#
# chronyc sources
#   shows status of NTP sources, the * indicates what server was chosen as the source
#
# chronyc sourcestats
#   shows statistics of sources
#
# BEGINNING OF CONFIGURATION FILE
# 
# Use Google's NTP servers
# Note Google utilizes leap second smearing. https://developers.google.com/time/smear
# NTP servers that do and do not utilize it should not be mixed.
# If your firewall does not allow outbound access, or if internal NTP servers are used
# add them here instead, and below.
# Note NTP is designed to handle network latency by measuring it, so a local NTP server
# is not likely as important as commonly assumed. Multiple NTP servers are more important. 
# The iburst directive enables an initial burst of activity to quickly synchronize, however it
# places a greater load on the NTP servers.
server time1.google.com iburst
server time2.google.com iburst
server time3.google.com iburst
server time4.google.com iburst

# Only upon startup, make a step (rapid change) to the system clock
# if it differs more than 0.2 seconds from these 2 NTP servers.
# This will pause chrony until this is accomplished.
# https://chrony.tuxfamily.org/manual.html#initstepslew-directive
# The initstepslew directive is functionally similar to a combination of the makestep and 
# server directives with the iburst option. The main difference is that the initstepslew 
# servers are used only before normal operation begins and that the foreground chronyd 
# process waits for initstepslew to finish before exiting. This is useful to prevent programs 
# started in the boot sequence after chronyd from reading the clock before itâ€™s stepped.
initstepslew 0.2 time2.google.com time3.google.com

# Record the rate at which the system clock gains/losses time.
driftfile /var/lib/chrony/drift

# Normally chronyd will cause the system to gradually correct any time offset, by slowing down
# or speeding up the clock as required. In certain situations, the system clock may be so far
# adrift that this slewing process would take a very long time to correct the system clock.
# DC/OS will not start until the system clock and NTP time are nearly the same, because DC/OS
# is a distributed OS and time synchronization is very important.
# This setting allows the system clock to be stepped (large change) vs slewed (small change)
# at any time if its offset is larger than 100ms.
makestep 0.1 -1

# Enable kernel synchronization of the real-time clock (RTC).
# Note there are always two clocks in linux, a real-time clock (RTC) aka hardware clock,
# which is independent of the OS and runs even when the computer is shut down,
# and also a system clock, also known as a software clock, that is maintained by the kernel and
# its initial value is based on the real-time clock. Once the system is booted and the system
# clock is initialized, the system clock is completely independent of the real-time clock.
# This directive causes chrony to set the real-time clock (hardware clock) on an ongoing basis.
# it can be useful in virtualized environments.
# https://chrony.tuxfamily.org/manual.html#rtcsync-directive
rtcsync

# Enable hardware timestamping on all interfaces that support it.
#hwtimestamp *

# Increase the minimum number of selectable sources required to adjust
# the system clock.
# Ideally 4 NTP servers are used, and the below directive can be enabled.
#minsources 2

# Specify file containing keys for NTP authentication.
#keyfile /etc/chrony.keys

# Specify directory for log files.
logdir /var/log/chrony

# Select which information is logged.
#log measurements statistics tracking

